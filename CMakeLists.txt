# Autogenerated by auto2cmake on 2018-03-07 11:49:59
cmake_minimum_required(VERSION 3.8)

project( matio
         VERSION 1.5.11
         LANGUAGES C CXX #Fortran
)

include(cmake/options.cmake)
include(cmake/thirdParties.cmake)

# Check C types
include(CheckTypeSize)
check_type_size(char        SIZEOF_CHAR)
check_type_size(double      SIZEOF_DOUBLE)
check_type_size(float       SIZEOF_FLOAT)
check_type_size(int         SIZEOF_INT)
check_type_size(long        SIZEOF_LONG)
check_type_size("long long" SIZEOF_LONG_LONG)
check_type_size(short       SIZEOF_SHORT)
check_type_size(size_t      SIZEOF_SIZE_T)

# Check functions
include(CheckFunctionExists)
check_function_exists(vsnprintf  HAVE_VSNPRINTF)
check_function_exists(snprintf   HAVE_SNPRINTF)
check_function_exists(vasprintf  HAVE_VASPRINTF)
check_function_exists(asprintf   HAVE_ASPRINTF)
check_function_exists(strcasecmp HAVE_STRCASECMP)
check_function_exists(getopt     HAVE_GETOPT)

include(cmake/VA_COPY.cmake)
VA_COPY()

if (NOT HAVE_GETOPT)
    add_library(gnu STATIC ${PROJECT_SOURCE_DIR}/matio/getopt/getopt_long.c)
    target_compile_definitions(gnu
        PUBLIC -DREPLACE_GETOPT)
    target_include_directories(gnu
        PUBLIC ${PROJECT_SOURCE_DIR}/matio/getopt/)
    set(GETOPT_LIB gnu)
endif()

include(CheckIncludeFile)
check_include_file(inttypes.h HAVE_INTTYPES_H)
check_include_file(stdint.h   HAVE_STDINT_H)
check_include_file(strings.h  HAVE_STRINGS_H)
check_include_file(ctype.h    HAVE_CTYPE_H)
check_include_file(stdlib.h   HAVE_STDLIB_H)
check_include_file(string.h   HAVE_STRING_H)
check_include_file(stdarg.h   HAVE_STDARG_H)

include(cmake/CheckHeaderSTDC.cmake)
check_header_stdc()

# Make the variables HAVE_MAT_UINT8_T, etc...
set(TYPES uint8_t uint16_t uint32_t uint64_t int8_t int16_t int32_t int64_t)
foreach(TYPE ${TYPES})
    string(TOUPPER ${TYPE} TYPE_UPPER)
    check_type_size(${TYPE} ${TYPE_UPPER})
    set(HAVE_MAT_${TYPE_UPPER} ${HAVE_${TYPE_UPPER}})
    set(SIZEOF_${TYPE_UPPER} ${${TYPE_UPPER}})
    if (NOT ${${TYPE_UPPER}})
        message(FATAL_ERROR "Unknown type ${TYPE}")
    endif()
endforeach()


# Setting the include directory for the application to find config.h
include_directories( ${CMAKE_BINARY_DIR} )
# Since we have created a config.h add a global define for it
add_definitions( "-DHAVE_CONFIG_H" )

include(cmake/src.cmake)
# include(cmake/getopt.cmake)
# include(cmake/tools.cmake)
# include(cmake/test.cmake)
